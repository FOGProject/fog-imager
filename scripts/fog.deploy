#!/bin/bash

### BEGIN VARIABLES
SCRIPT_DIR=$(cd -P `dirname ${BASH_SOURCE[0]}` && pwd)
shareDir="/images" # Remote share dir
jobName="tmpJob"
srcDir="${shareDir}/${jobName}"
### END VARIABLES

### BEGIN SOURCE VARIABLES
# TODO - Save this for the resizable partitioning
#if [ "$SOURCED_GPT_GUID" == "true" ]; then
#   . ${SCRIPT_DIR}/lib/gpt.guid
#fi
### END SOURCE VARIABLES

### BEGIN FUNCTIONS
function initSrc() {
	local diskCount=`lsblk -dpno MAJ:MIN | cut -d: -f1 | grep "^[ ]*[38]$" | \
		wc -l`

	if [ ! -d "$srcDir" ]; then
		echo -e "\nFATAL! Source directory \"${srcDir}\" does not exist!"
		echo "Imaging process cannot continue!"
		exit 101
	fi

	# Confirm all available disk data can image successfully.
	local notDone=1
	local imgCount=1
	while [ "$notDone" == "1" ]; do
		local mbrFile="${srcDir}/d${imgCount}.mbr"
		local gptFile="${srcDir}/d${imgCount}.gpt"
		if [ ! -f "$mbrFile" ] && [ ! -f "$gptFile" ]; then
			# We need at least one disk to image
			if [ "$imgCount" == "1" ]; then
				echo -e "\nFATAL! No partition table for disk ${imgCount}!"
				echo "Imaging process cannot continue!"
				exit 102
			else
				notDone=0
				imgCount=$(($imgCount - 1))
			fi
		else
			imgCount=$(($imgCount + 1))
		fi
	done

	# Ensure there are enough disks to image to.
	if [ "$imgCount" -gt "$diskCount" ]; then
		echo -e "\nFATAL! Not enough disks on target system!"
		echo "Imaging process cannot continue!"
		exit 103
	fi

	for dnum in `seq $imgCount`; do
		local partFile="${srcDir}/d${dnum}.partitions"

		if [ ! -f "$partFile" ]; then
			echo -e "\nFATAL! No partition dump detected for disk ${dnum}!"
			echo "Imaging process cannot continue!"
			exit 104
		fi
		local partList=`cat $partFile | grep start=`
		for part in $partList; do
			local partName=`echo $part | awk -F'[ :,=]+' '{print $1}'`
			local partID=`echo $part | awk -F'[ :,=]+' '{print $7}'`

			local partFile="d${dnum}p${partName##*[a-z]}.img"
			if [ "$partID" != "5" ] && [ "$partID" != "82" ]; then
				if [ ! -f "${srcDir}/$partFile" ]; then
					echo -e "\nFATAL! No image file detected for ${partFile}!"
					echo "Imaging process cannot continue!"
					exit 105
				fi
			fi
		done
	done
}

function getDiskList() {
	local rval=`lsblk -dpno KNAME,MAJ:MIN -x KNAME | awk -F'[ :]+' '{
		if ($2 == "3" || $2 == "8")
			print $1
		}'`

	echo "$rval"
}

# $1: Target disk
function probeParts() {
	local target=$1

	udevadm settle
	blockdev --rereadpt $target > /dev/null 2>&1
	if [ "$?" != "0" ]; then
		echo "FATAL! Unable to read back partitions!"
		exit 4
	fi
}

# $1: Partition target to deploy to
# $2: Disk number
function deployPartTable() {
	local diskName=$1
	local diskNum=$2
	local sfdiskFile=${srcDir}/d${diskNum}.partitions

	# Wipe partition table and more than average slack space
	dd if=/dev/zero of=$disk bs=512 count=4096 2>/dev/null

	if [ -f "${srcDir}/d${diskNum}.mbr" ]; then
		local tableFile=${srcDir}/d${diskNum}.mbr
	elif [ -f "${srcDir}/d${diskNum}.gpt" ]; then
		local tableFile=${srcDir}/d${diskNum}.gpt
	else
		echo "FATAL! Partition table missing!"
	fi

	# Restore raw partition table
	dd if=$tableFile of=$diskName bs=512 count=${firstSector}

	probeParts $diskName
}

# $1: Partition image base file name
# $2: Partition target to deploy to
function deployPartition() {
	local partImg=$1
	local partName=$2

	mkfifo /tmp/pigz
	cat ${partImg} > /tmp/pigz &

	pigz -d -c < /tmp/pigz | \
		partclone.restore --ignore_crc -O $partName -N -f 1
	
	rm /tmp/pigz
}

# $1: Target disk
# $2: Disk number
function processPartitions() {
	local target=$1
	local number=$2
	# The partition table has been written. This is safe.
	local partDataList=`sfdisk -d $target | grep start=`
	local swapFile="${srcDir}/d${number}.swap"
	
	# Set IFS to newline for loop
	ORIG_IFS=$IFS
	IFS=$'\n'
	for partData in ${partDataList}; do
		local partName=`echo $partData | awk -F'[ :,=]+' '{print $1}'`
		local partID=`echo $partData | awk -F'[ :,=]+' '{print $7}'`
		
		if [ "$partID" == "5" ]; then
			echo "Extended partition detected. This does nothing."
		elif [ "$partID" == "82" ]; then
			echo "Setting up swap partition with original UUID."
			local swapUUID=`grep $partName $swapFile | cut -d' ' -f2`

			if [ -n "$swapUUID" ]; then
				mkswap -U $swapUUID $partName
			else
				echo "FATAL! Swap partition does not have a UUID!"
				exit 5
			fi
		else
			echo "Deploying $partName"
			deployPartition ${srcDir}/d${number}p${partName##*[a-z]}.img \
				${partName}
		fi
	done
	IFS=$ORIG_IFS
}
### END FUNCTIONS

initSrc

diskList=`getDiskList`

diskCount=1
for disk in ${diskList}; do
	echo "Processing disk $disk"
	deployPartTable $disk $diskCount
	processPartitions $disk $diskCount
done

echo -e "Image deploy complete.\n"
